/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ufma.pe.gui;

import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import java.math.BigDecimal;
import java.math.MathContext;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author fbeneditovm
 */
public class MainScreen extends javax.swing.JFrame {
    
    int matrixSize, nIterations;
    
    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinnerNIterations = new javax.swing.JSpinner();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableMatrix = new javax.swing.JTable();
        jSpinnerMatrizSize = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btCalculate = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jButtonSetValues = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListCommunicants = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListRecurrent = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListTransient = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSpinnerNIterations.setValue(20);

        jTableMatrix.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "s1"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableMatrix.setShowGrid(true);
        jScrollPane3.setViewportView(jTableMatrix);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel1.setText("Press (Tab or Enter) after you input the Matrix.");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel3.setText("Communicants:");

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel4.setText("Max Number of iterations:");

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel5.setText("Matrix Size:");

        btCalculate.setBackground(new java.awt.Color(255, 255, 255));
        btCalculate.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        btCalculate.setForeground(new java.awt.Color(0, 0, 255));
        btCalculate.setText("Calculate");
        btCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCalculateActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        jLabel7.setText("Transition Matrix:");

        jButtonSetValues.setText("Set");
        jButtonSetValues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetValuesActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jListCommunicants);

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel6.setText("Recurrent:");

        jScrollPane2.setViewportView(jListRecurrent);

        jScrollPane4.setViewportView(jListTransient);

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel8.setText("Transient:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jSpinnerMatrizSize, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jSpinnerNIterations, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonSetValues)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 208, Short.MAX_VALUE)
                        .addComponent(btCalculate)
                        .addGap(34, 34, 34))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(172, 172, 172)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jSpinnerMatrizSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jSpinnerNIterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSetValues))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel1)
                    .addComponent(btCalculate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * The probability calculation is done in this method
     */
    private void btCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCalculateActionPerformed
        int i, j, k;
        
        
        /**
         * Getting the user input
         */
        
        BigDecimal[][] matrix = new BigDecimal[matrixSize][matrixSize];
        
        TableModel matrixTModel = jTableMatrix.getModel();
        
        for(i=0; i<matrixSize; i++){
            for(j=0; j<matrixSize; j++){
                try{
                    matrix[i][j] = new BigDecimal((String)matrixTModel.getValueAt(i, j));
                }catch(NullPointerException e){
                    JOptionPane.showMessageDialog(null, 
                          "You did not press (Tab or Enter) after you filled the Matrix."
                        + "Please check your input and try again!");
                    break;
                }catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(null, "You typed an invalid value in the Matrix."
                        + "Please check your input and try again!");
            }
            }
        }
        
        /**
         * Uncomment the next part to test input
        */
        /*
        System.out.println("Matrix Size: "+matrixSize);
        System.out.println("Number or Iteractions: "+nIterations);
        System.out.println("\nTransition Matrix:");
        for(i=0; i<matrixSize; i++){
            for(j=0; j<matrixSize; j++){
                System.out.print(matrix[i][j]+", ");
            }
            System.out.println("");
        }
        */
        
        boolean[] isStateRecurrent = new boolean[matrixSize];
        for(i=0; i<matrixSize; i++) isStateRecurrent[i] = true;
        
        /**
         * Contains the list of states reachable from any state
         * in any instant of time
         */
        HashMap<Integer, HashSet<Integer>> reachableFrom = new HashMap<>();
        for(i=0; i<matrixSize; i++){
            reachableFrom.put(i, new HashSet<>());
        }
        //The set of communicant states
        HashSet<String> communicant = new HashSet<>();
        
        /**
         * Calculation of the Transition Matrix after
         * nIterations iterations
         */
        BigDecimal[][][] matrices = new BigDecimal[nIterations][matrixSize][matrixSize];
        for(i=0; i<matrixSize; i++)
            System.arraycopy(matrix[i], 0, matrices[0][i], 0, matrixSize);
        
        /**
         * The state is not recurrent if the probability of going back to itself
         * is less than 1 in any transition matrix
         */
        for(i=0; i<matrixSize; i++){
            if(matrix[i][i].compareTo(BigDecimal.ONE)<0)
                isStateRecurrent[i] = false;
        }
        
        for(i=1; i<nIterations; i++){
            
            matrices[i] = multiplyMatrices(matrices[i-1], matrix);
            
            for(j=0; j<matrixSize; j++){
                /**
                * The state is not recurrent if the probability of going back to itself
                * is less than one in any transition matrix
                */
                if(matrices[i][j][j].compareTo(BigDecimal.ONE)<0)
                    isStateRecurrent[j] = false;
                
                for(k=0; k<matrixSize; k++){
                    /**
                     * Adds k to the set of states reachable from j if
                     * Pjk>0
                     */
                    if(matrices[i][j][k].compareTo(BigDecimal.ZERO)>0){
                        reachableFrom.get(j).add(k);
                        /**
                         * If j is already reachable from k,
                         * k and j are communicants
                         */
                        if(reachableFrom.get(k).contains(j))
                            communicant.add("s"+k+"<->s"+j+"");
                    }
                }
            }
            
            /**
             * Uncomment the next part to see the
             * Transition Matrix after each iteration
             */
            /*
            System.out.println("Matrix"+(i+2)+":\n");
            for(j=0; j<matrixSize; j++){
                for(k=0; k<matrixSize; k++){
                    System.out.print(matrices[i][j][k]+", ");
                }
            System.out.println("");
            }
            */
        }
        
        /**
         * Showing the result on the screen
         */
        String[] data1 = communicant.toArray(new String[communicant.size()]);
        jListCommunicants.setListData(data1);
        LinkedList<String> recurrentSt = new LinkedList<>();
        LinkedList<String> transientSt = new LinkedList<>();
        for(i=0; i<matrixSize; i++){
            if(isStateRecurrent[i])
                recurrentSt.add("s"+i);
            else
                transientSt.add("s"+i);
        }
        String[] data2 = recurrentSt.toArray(new String[recurrentSt.size()]);
        jListRecurrent.setListData(data2);
        String[] data3 = transientSt.toArray(new String[transientSt.size()]);
        jListTransient.setListData(data3);
    }//GEN-LAST:event_btCalculateActionPerformed

    private void jButtonSetValuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetValuesActionPerformed
        //Get the Matrix Size
        matrixSize = (int)jSpinnerMatrizSize.getValue();
        nIterations = (int)jSpinnerNIterations.getValue();
        if(matrixSize<=0){
            JOptionPane.showMessageDialog(null, "The matrix size can be neither zero nor negative!");
            return;
        }
        
        //Set the columnNames
        String[] columnNames = new String[matrixSize];
        for(int i=0; i<matrixSize; i++){
            columnNames[i]="s"+i;
        }
        
        //Set the equations TableModel
        DefaultTableModel modelo1 = new DefaultTableModel(columnNames, matrixSize);
        jTableMatrix.setModel(modelo1);
    }//GEN-LAST:event_jButtonSetValuesActionPerformed
    
    /**
     * A simple matrices multiplication method using BigDecimal
     * @param a the first matrix
     * @param b the second matrix
     * @return the matrix resultant of the multiplication
     */
    
    public BigDecimal[][] multiplyMatrices(BigDecimal[][] a, BigDecimal[][] b){       
        int i,j;
        int m1 = a.length;
        int n1 = a[0].length;
        int m2 = b.length;
        int n2 = b[0].length;
        if (n1 != m2) System.out.println("Illegal matrix dimensions.");
        
        BigDecimal[][] c = new BigDecimal[m1][n2];
        for (i = 0; i < m1; i++){
            for (j = 0; j < n2; j++){
                c[i][j] = new BigDecimal("0");
                for (int k = 0; k < n1; k++){
                    c[i][j] = c[i][j].add(a[i][k].multiply(b[k][j]));
                }
            }
        }
        return c;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCalculate;
    private javax.swing.JButton jButtonSetValues;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jListCommunicants;
    private javax.swing.JList<String> jListRecurrent;
    private javax.swing.JList<String> jListTransient;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSpinner jSpinnerMatrizSize;
    private javax.swing.JSpinner jSpinnerNIterations;
    private javax.swing.JTable jTableMatrix;
    // End of variables declaration//GEN-END:variables
}
